---
title: "Navigating the S&P 500 with Machine Learning"
subtitle: "INFO 523 - Summer 2025 - Final Project"
author: "Trevor Macdonald & Nandakumar Kuthalaraja"
title-slide-attributes:
  data-background-image: images/sp500.png
  data-background-size: cover
  data-background-opacity: ".4"
  data-slide-number: none
  style: "color: black;"
format:
  revealjs:
    theme:  ['data/customtheming.scss']
    css: data/style.css
  
editor: visual
jupyter: python3
execute:
  echo: false
---

## What is the S&P 500?

:::{.smaller}
- The **S&P 500 (Standard & Poorâ€™s 500 Index)** is a stock market index that tracks the performance of **500 of the largest publicly traded companies** in the United States.  
- It is considered a **benchmark** for the overall U.S. stock market and economy.  
- The index covers companies across **11 sectors**, including technology, healthcare, finance, and consumer goods. 
- Investors, analysts, and researchers use the S&P 500 to:  
  - Measure market performance  
  - Benchmark investments  
  - Study trends in the U.S. economy  
::: 


## Distribution of S&P 500

:::{.smaller}
```{python}
#| label: setup001

import pandas as pd
import matplotlib.pyplot as plt

# 1) Load current S&P 500 constituents with sectors from Wikipedia
url = "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
dfs = pd.read_html(url, match="Symbol")
df = dfs[0].copy()

# 2) Normalize column names and get sector column robustly
df.columns = [c.strip() for c in df.columns]
sector_col = [c for c in df.columns if c.lower().startswith("gics sector")][0]

# 3) Count & percentage by sector
counts = df[sector_col].value_counts().sort_values(ascending=True)
pct = (counts / counts.sum() * 100).round(1)

# 4) Plot (horizontal bar chart with labels)
fig, ax = plt.subplots(figsize=(10,6), dpi=150)
ax.barh(counts.index, pct.values)

for i, (v) in enumerate(pct.values):
    ax.text(v, i, f"  {v:.1f}%", va="center")

ax.set_xlabel("Percent of Companies")
ax.set_ylabel("")
ax.set_title("S&P 500 Companies by Sector (%)", pad=12)
ax.spines["top"].set_visible(False)
ax.spines["right"].set_visible(False)
plt.tight_layout()
plt.show()

```

